* Data search:
lemmas = WordNet::Lemma.find_all('word')
  -> lemmas.map do |lemma| 
    [lemma.word, lemma.pos, lemma.synsets.first(3).map(&:gloss)]
  end (user selects from first 3 synsets, categorized by part of speech)
  -> exclude any lemma with pos == 'r'
  -> if the only lemma is pos == 'r', 
    -run lemmas.first.synsets.first.relation('\\').first
    -make that the base synset called adj_synset
    -return [[adj_synset.words.first, adj_synset.pos, adj_synset.gloss]]

* To get a synset: WordNet::Synset.new(synset.pos, synset.pos_offset)

* synonym methods (extend WordNet::Synset class):
    - hypernyms/hyponyms for nouns and verbs (synset.hypernyms/hyponyms)
    - synset.relation('&') for adjectives
-> #map(&:words), to get words from synsets, #map(&:gloss) to get definition
-> exclude words that have the target word in them
-> select 5 synsets at random to display in force graph/flow

* Front end force graph/flow:
- Custom nodes with React Flow
  - Clickable word/button that takes user to word
  - Rotatable through other members of synset
  - Gloss displayed in smaller letters

* Other points:
- Mobile first
- TypeScript
- Tailwind CSS styling

Routes:
- /words/:word -> words#show (shows glosses)
- /synsets/:pos/:pos_offset/synonyms -> synonyms#index (shows synonyms)